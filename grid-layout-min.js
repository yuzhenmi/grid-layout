/**
 * By Hans Yu
 * Minified by Google closure compiler
 */
function GridLayout(b){this.nodes=b}
GridLayout.prototype.generate3DLayout=function(){for(var b=this.nodes.sort(function(a,b){return b.connections.length-a.connections.length}),f=GridLayout.generateWeightMatrix(b),e=2*Math.ceil(Math.pow(b.length,1/3)),d=[],a=0;a<e;a++){d.push([]);for(var c=0;c<e;c++){d[a].push([]);for(var h=0;h<e;h++)d[a][c].push(-1)}}for(a=0;a<b.length;a++)GridLayout.randomlyPositionNodeFor3D(a,b,d);for(var k=[],a=0;a<b.length-1;a++)for(k.push([]),c=0;c<b.length-a-1;c++)k[a].push(GridLayout.calculateCostBetweenNodesFor3D(b[a],b[c+
a+1],f[a][c]));var m=0.6;do{for(var g=[],a=0;a<b.length;a++)g.push(GridLayout.getNodeTotalCostForGrid(a,k));for(var l=g.slice(0).sort(function(a,b){return a-b})[Math.floor(b.length*m)],a=0;a<b.length;a++)g[a]<l&&(d[b[a].position.x][b[a].position.y][b[a].position.z]=-1,GridLayout.randomlyPositionNodeFor3D(a,b,d),GridLayout.updateNodeCostsForGrid(a,GridLayout.findNodeCostsFor3D(a,b,f),k));for(a=0;a<b.length;a++){g=b[a];d[g.position.x][g.position.y][g.position.z]=-1;for(var l={x:g.position.x,y:g.position.y,
z:g.position.z},t=GridLayout.getNodeTotalCostForGrid(a,k),n=[],c=0;c<a;c++)n.push(k[c][a-c-1]);h=b.length-a-1;for(c=0;c<h;c++)n.push(k[a][c]);for(var p=0;p<e;p++){g.position.x=p;for(var q=0;q<e;q++){g.position.y=q;for(var r=0;r<e;r++)if(-1==d[p][q][r]){g.position.z=r;for(var s=GridLayout.findNodeCostsFor3D(a,b,f),h=c=0;h<s.length;h++)c+=s[h];if(c<t)for(l.x=g.position.x,l.y=g.position.y,l.z=g.position.z,t=c,c=0;c<s.length;c++)n[c]=s[c]}}}g.position=l;d[g.position.x][g.position.y][g.position.z]=a;GridLayout.updateNodeCostsForGrid(a,
n,k)}m-=0.05}while(0<m);for(a=0;a<b.length;a++)b[a].position.x-=Math.floor(0.5*e),b[a].position.y-=Math.floor(0.5*e),b[a].position.z-=Math.floor(0.5*e);return b};GridLayout.randomlyPositionNodeFor3D=function(b,f,e){var d=null,a=null,c=null;do d=Math.floor(Math.random()*e.length),a=Math.floor(Math.random()*e.length),c=Math.floor(Math.random()*e.length);while(-1!=e[d][a][c]);e[d][a][c]=b;f[b].position={x:d,y:a,z:c}};
GridLayout.calculateCostBetweenNodesFor3D=function(b,f,e){b=Math.abs(b.position.x-f.position.x)+Math.abs(b.position.y-f.position.y)+Math.abs(b.position.z-f.position.z);return e/b/b};GridLayout.findNodeCostsFor3D=function(b,f,e){for(var d=f[b],a=[],c=0;c<b;c++)a.push(GridLayout.calculateCostBetweenNodesFor3D(d,f[c],e[c][b-c-1]));for(var h=f.length-b-1,c=0;c<h;c++)a.push(GridLayout.calculateCostBetweenNodesFor3D(d,f[b+c+1],e[b][c]));return a};
GridLayout.getNodeTotalCostForGrid=function(b,f){for(var e=0,d=0;d<b;d++)e+=f[d][b-d-1];for(var a=f.length-b,d=0;d<a;d++)e+=f[b][d];return e};GridLayout.updateNodeCostsForGrid=function(b,f,e){for(var d=0;d<b;d++)e[d][b-d-1]=f[d];for(d=0;d<f.length-b;d++)e[b][d]=f[d+b]};
GridLayout.generateWeightMatrix=function(b){for(var f=[],e=0;e<b.length-1;e++){f.push([]);for(var d=0;d<b.length-e-1;d++){var a=GridLayout.findDistanceBetweenNodes(b[e],b[e+d+1],4),c=0.1;1==a?c=-1:2==a?c=1E-4:3==a?c=0.001:4==a&&(c=0.01);f[e].push(c)}}return f};
GridLayout.findDistanceBetweenNodes=function(b,f,e){for(var d=e+1,a=0;a<b.connections.length;a++){if(b.connections[a].targetNode==f)return 1;if(1<e){var c=GridLayout.findDistanceBetweenNodes(b.connections[a].targetNode,f,e-1);0<c&&c<d&&(d=c)}}return d>e?-1:d+1};