/**
 * grid-layout minified
 * By Hans Yu
 * Minified by Google closure compiler
 */
function GridLayout(a){this.nodes=a}
GridLayout.prototype.generate3DLayout=function(){for(var a=this.nodes.sort(function(a,b){return b.connections.length-a.connections.length}),f=GridLayout.generateWeightMatrix(a),e=2*Math.ceil(Math.pow(a.length,1/3)),d=[],b=0;b<e;b++){d.push([]);for(var c=0;c<e;c++){d[b].push([]);for(var h=0;h<e;h++)d[b][c].push(-1)}}for(b=0;b<a.length;b++)GridLayout.randomlyPositionNodeFor3D(b,a,d);for(var k=[],b=0;b<a.length-1;b++)for(k.push([]),c=0;c<a.length-b-1;c++)k[b].push(GridLayout.calculateCostBetweenNodesFor3D(a[b],a[c+
b+1],f[b][c]));var m=0.6;do{for(var g=[],b=0;b<a.length;b++)g.push(GridLayout.getNodeTotalCostForGrid(b,k));for(var l=g.slice(0).sort(function(a,b){return a-b})[Math.floor(a.length*m)],b=0;b<a.length;b++)g[b]<l&&(d[a[b].position.x][a[b].position.y][a[b].position.z]=-1,GridLayout.randomlyPositionNodeFor3D(b,a,d),GridLayout.updateNodeCostsForGrid(b,GridLayout.findNodeCostsFor3D(b,a,f),k));for(b=0;b<a.length;b++){g=a[b];d[g.position.x][g.position.y][g.position.z]=-1;for(var l={x:g.position.x,y:g.position.y,
z:g.position.z},t=GridLayout.getNodeTotalCostForGrid(b,k),n=[],c=0;c<b;c++)n.push(k[c][b-c-1]);h=a.length-b-1;for(c=0;c<h;c++)n.push(k[b][c]);for(var p=0;p<e;p++){g.position.x=p;for(var q=0;q<e;q++){g.position.y=q;for(var r=0;r<e;r++)if(-1==d[p][q][r]){g.position.z=r;for(var s=GridLayout.findNodeCostsFor3D(b,a,f),h=c=0;h<s.length;h++)c+=s[h];if(c<t)for(l.x=g.position.x,l.y=g.position.y,l.z=g.position.z,t=c,c=0;c<s.length;c++)n[c]=s[c]}}}g.position=l;d[g.position.x][g.position.y][g.position.z]=b;GridLayout.updateNodeCostsForGrid(b,
n,k)}m-=0.05}while(0<m);for(b=0;b<a.length;b++)a[b].position.x-=Math.floor(0.5*e),a[b].position.y-=Math.floor(0.5*e),a[b].position.z-=Math.floor(0.5*e);return a};GridLayout.randomlyPositionNodeFor3D=function(a,f,e){var d=null,b=null,c=null;do d=Math.floor(Math.random()*e.length),b=Math.floor(Math.random()*e.length),c=Math.floor(Math.random()*e.length);while(-1!=e[d][b][c]);e[d][b][c]=a;f[a].position={x:d,y:b,z:c}};
GridLayout.calculateCostBetweenNodesFor3D=function(a,f,e){a=Math.abs(a.position.x-f.position.x)+Math.abs(a.position.y-f.position.y)+Math.abs(a.position.z-f.position.z);return e/a/a};GridLayout.findNodeCostsFor3D=function(a,f,e){for(var d=f[a],b=[],c=0;c<a;c++)b.push(GridLayout.calculateCostBetweenNodesFor3D(d,f[c],e[c][a-c-1]));for(var h=f.length-a-1,c=0;c<h;c++)b.push(GridLayout.calculateCostBetweenNodesFor3D(d,f[a+c+1],e[a][c]));return b};
GridLayout.getNodeTotalCostForGrid=function(a,f){for(var e=0,d=0;d<a;d++)e+=f[d][a-d-1];for(var b=f.length-a,d=0;d<b;d++)e+=f[a][d];return e};GridLayout.updateNodeCostsForGrid=function(a,f,e){for(var d=0;d<a;d++)e[d][a-d-1]=f[d];for(d=0;d<f.length-a;d++)e[a][d]=f[d+a]};
GridLayout.generateWeightMatrix=function(a){for(var f=[],e=0;e<a.length-1;e++){f.push([]);for(var d=0;d<a.length-e-1;d++){var b=GridLayout.findDistanceBetweenNodes(a[e],a[e+d+1],4),c=0.1;1==b?c=-1:2==b?c=1E-4:3==b?c=0.001:4==b&&(c=0.01);f[e].push(c)}}return f};
GridLayout.findDistanceBetweenNodes=function(a,f,e){for(var d=e+1,b=0;b<a.connections.length;b++){if(a.connections[b].targetNode==f)return 1;if(1<e){var c=GridLayout.findDistanceBetweenNodes(a.connections[b].targetNode,f,e-1);0<c&&c<d&&(d=c)}}return d>e?-1:d+1};GridLayout.Node=function(){this.connections=[]};GridLayout.Connection=function(a){this.targetNode=a};GridLayout.connectNodes=function(a,f){a.connections.push(new GridLayout.Connection(f));f.connections.push(new GridLayout.Connection(a))};